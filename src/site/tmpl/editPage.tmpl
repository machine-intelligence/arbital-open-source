{{/* editPage.tmpl is the page for creating a new page or editing an existing one. */}}
{{define "base"}}
<!DOCTYPE html>
<html>
<head>
	<title>{{if .Page.Title}}Edit - {{.Page.Title}}{{else}}New Page{{end}} - Zanaduu</title>
	{{template "style"}}
	{{template "scripts"}}
	{{template "angular" .}}
	<script>
		// Map of all aliases: fullName -> {pageId, title}
		var pageAliases = { {{range .Aliases}}"{{.FullName}}":{pageId:"{{.PageId}}", title:"{{.PageTitle}}"},{{end}} };
		// This array stores all available aliases for link autocompletion.
		var allAliases = [];
		for (var fullName in pageAliases) {
			var val = pageAliases[fullName];
			allAliases.push('"' + val.title + '" (' + fullName + ')');
		}
	</script>
	<script src="/static/js/editPage.js"></script>
	<script>
		// MainCtrl is the main control for this page.
		app.controller("MainCtrl", function ($scope, pageService, userService, $compile, $timeout) {
			$scope.pageId = "{{.Page.PageId}}";
			$scope.page = pageService.pageMap[$scope.pageId];

			var newPageId = undefined;  // id of the page we are editing in the modal
			// Process event to create the new-page-modal. This event is raised from Markdown.Editor.js
			$(document).on("new-page-modal-event", function(e, newPageCallback){
				var $modal = $('#new-page-modal');
				var $modalBody = $modal.find(".modal-body");
				$modalBody.empty().append("<img src='/static/images/loading.gif'/>");
				
				// Setup modal.
				var setupModal = function(pageId, isResumed) {
					var newPage = pageService.pageMap[pageId];
					if (!isResumed) {
						newPage.Type = $scope.page.Type;
						newPage.Parents = [{ParentId: $scope.page.PageId}];
						newPage.Author = {Id: userService.user.Id};
					}

					// Dynamically create znd-edit-page directive.
					var el = $compile("<znd-edit-page page-id='\"" + pageId +
							"\"' is-modal='true'></znd-edit-page>")($scope);
					$modalBody.empty().append(el);
					$modal.modal();

					// Initialize editPage script.
					var editPage;
					$timeout(function(){
						editPage = new EditPage(newPage, pageService, el, $scope.page);
						editPage.start();
					});

					// Hande modal's close event, with the possibility of returning the
					// new page's alias.
					var returnedNewPageAlias = null;
					$modal.on("shown.bs.modal", function (e) {
						$modal.find("input[name='title']").focus();
					});
					$modal.on("hidden.bs.modal", function (e) {
						newPageCallback(returnedNewPageAlias);
						editPage.stop();
						delete editPage;
						$modal.off("shown.bs.modal");
						$modal.off("hidden.bs.modal");
						$(document).off("new-page-modal-closed-event");
						$modalBody.empty();
					});
					// Allow the modal to "return" the alias for the newly created page.
					$(document).on("new-page-modal-closed-event", function(e, alias){
						$modal.modal("hide");
						returnedNewPageAlias = alias;
						newPageId = undefined;
					});
				};
				
				var loadPages = function() {
				var loadPagesIds = [];
				if (newPageId !== undefined) {
					// Resume editing some page.
					loadPagesIds = [newPageId];
					pageService.removePageFromMap(newPageId);
				}
				pageService.loadPages(loadPagesIds,
					function(data, status) {
						newPageId = Object.keys(data)[0];
						if (newPageId !== $scope.pageId) {  // let's not try to edit the same page in two places
							setupModal(newPageId, loadPagesIds.length > 0);
						}
					}, function(data, status) {
						console.log("Couldn't load pages: " + loadPagesIds);
						if (loadPagesIds.length > 0) {
							// Let's try again, but without trying to resume editing.
							newPageId = undefined;
							loadPages();
						}
					});
				};
				loadPages();
			});
		});
	</script>
</head>

<body privacy-key="{{.Page.PrivacyKey}}" page-id="{{.Page.PageId}}" ng-app="zanaduu" ng-controller="ZanaduuCtrl">

{{template "navbar" .User}}

<!-- Modal for new links used from Markdown.Editor. -->
<div class="modal fade" id="new-link-modal" tabindex="-1" style="z-index:2000">
	<div class="modal-dialog">
		<form class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title"></h4>
			</div>
			<div class="modal-body">
				<input name="link" type="text" class="form-control new-link-input">
			</div>
			<div class="modal-footer">
			  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
				<button type="submit" class="btn btn-primary">Insert</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal for creating new pages. -->
<div class="modal fade" id="new-page-modal" tabindex="-1" style="z-index:1000">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">New Page</h4>
			</div>
			<div class="modal-body">
			</div>
		</div>
	</div>
</div>

{{with .Page}}
	{{if gt .DeletedBy 0}}
		<div class="new-page-body-div">
			<p class="text-center alert alert-danger">This page has been deleted.
				{{if IsAdmin}}
					<span class="admin">By id: {{.DeletedBy}}. <a href="#" class="undo-page-delete">Undo.</a></span>
				{{end}}
			</p>
		</div>
	{{else}}
		<div class="new-page-body-div" ng-controller="MainCtrl">
			<znd-edit-page page-id="page.PageId"></znd-edit-page>
		</div>
	{{end}}
{{end}}

{{template "footer"}}
</body>
</html>
{{end}}
